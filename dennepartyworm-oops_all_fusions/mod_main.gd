extends Node

# ! Comments prefixed with "!" mean they are extra info. Comments without them
# ! should be kept because they give your mod structure and make it easier to
# ! read by other modders
# ! Comments with "?" should be replaced by you with the appropriate information

# ! This template file is statically typed. You don't have to do that, but it can help avoid bugs
# ! You can learn more about static typing in the docs
# ! https://docs.godotengine.org/en/3.5/tutorials/scripting/gdscript/static_typing.html

# ? Brief overview of what your mod does...

const MOD_DIR := "dennepartyworm-oops_all_fusions" # Name of the directory that this file is in
const LOG_NAME := "dennepartyworm-oops_all_fusions:Main" # Full ID of the mod (AuthorName-ModName)

const BOSS_COGS := preload("res://mods-unpacked/dennepartyworm-oops_all_fusions/overwrites/objects/cog/presets/pools/directors.tres") 

var mod_dir_path := ""
var extensions_dir_path := ""
var translations_dir_path := ""

var directors_fuser_bad = false

# ! your _ready func.
func _init() -> void:
	ModLoaderLog.info("Init", LOG_NAME)
	mod_dir_path = ModLoaderMod.get_unpacked_dir().path_join(MOD_DIR)
	print(mod_dir_path)
	# Add extensions
	install_script_extensions()
	install_script_hook_files()
	

	# Add translations
	add_translations()



func install_script_extensions() -> void:
	# ! any script extensions should go in this directory, and should follow the same directory structure as vanilla
	extensions_dir_path = mod_dir_path.path_join("extensions")

	# ? Brief description/reason behind this edit of vanilla code...
	#ModLoaderMod.install_script_extension(extensions_dir_path.path_join("mod_main.gd"))
	#ModLoaderMod.install_script_extension(ext_dir + "entities/units/player/player.gd") # ! Note that this file does not exist in this example mod

	# ! Add extensions (longform version of the above)
	#ModLoaderMod.install_script_extension("res://mods-unpacked/dennepartyworm-oops_all_fusions/extensions/objects/cog/cog.gd")


func install_script_hook_files() -> void:
	extensions_dir_path = mod_dir_path.path_join("extensions")
	#ModLoaderMod.install_script_hooks("res://objects/cog/cogdna.gd", extensions_dir_path.path_join("objects/cog/cogdna.hooks.gd"))


func add_translations() -> void:
	# ! Place all of your translation files into this directory
	translations_dir_path = mod_dir_path.path_join("translations")

	# ! Load translations for your mod, if you need them.
	# ! Add translations by adding a CSV called "modname.csv" into the "translations" directory.
	# ! Godot will automatically generate a ".translation" file, eg "modname.en.translation".
	# ! Note that in this example, only the file called "modname.csv" is custom;
	# ! any other files in the "translations" directory were automatically generated by Godot
	#ModLoaderMod.add_translation(translations_dir_path.path_join("modname.en.position"))


func _ready() -> void:
	Util.s_floor_started.connect(on_floor_started)
	Globals.s_entered_barrel_room.connect(on_final_floor_started)

	# ! This uses Godot's native `tr` func, which translates a string. You'll
	# ! find this particular string in the example CSV here: translations/modname.csv
	#ModLoaderLog.info("Translation Demo: " + tr("MODNAME_READY_TEXT"), LOG_NAME)
	

#Whenever a cog spawns normally, make it a fusion.
func on_floor_started(game_floor: GameFloor) -> void:
	game_floor.s_cog_spawned.connect(
		func(cog: Cog): 
			cog.fusion = true
			cog.skelecog = false
			print("fusing...")
	)
	
#Cogs in the penthouse spawn Not Normally
func on_final_floor_started() -> void:
	var timer = Timer.new()
	timer.autostart = true
	timer.wait_time = 0.5
	add_child(timer)
	timer.timeout.connect(func():
		if BattleService and is_instance_valid(BattleService.battle_node) and not directors_fuser_bad:
			var penthouse_boss = BattleService.battle_node.get_parent()
			var boss1 = penthouse_boss.boss_cog
			var boss2 = penthouse_boss.boss_cog_2
			director_fuser(boss1)
			director_fuser(boss2)
			#This sucks
			directors_fuser_bad = true
		if BattleService and is_instance_valid(BattleService.ongoing_battle):
			if not is_connected("BattleService.ongoing_battle.s_participant_joined", on_participant_joined):
				BattleService.ongoing_battle.s_participant_joined.connect(on_participant_joined)
	)

#Reaching into the room and fusing the already-spawned directors with my bare hands
func director_fuser(cog: Cog) -> void:
	#Various code breaks if you don't try to put their normal names back on,
	#except their fused name still appears in game? IDK I've been here for 10 billion years
	var currentname = cog.dna.cog_name
	var currentstats = cog.stats
	cog.fusion = true
	cog.skelecog = false
	cog.construct_cog()
	cog.set_animation('neutral')
	var new_text: String = cog.dna.cog_name + '\n'
	cog.dna.cog_name = currentname
		
	#Do the nametag parts of set_up_stats without messing with The Actual Stats (-> 16k HP directors)
	new_text += 'Level ' + str(cog.level)
	if cog.dna.custom_nametag_suffix: new_text += '\n%s' % cog.dna.custom_nametag_suffix
	cog.body.nametag.text = new_text
	cog.body.nametag_node.update_position(new_text)
	if not cog.stats.hp_changed.is_connected(cog.update_health_light):
		cog.stats.hp_changed.connect(cog.update_health_light.unbind(1))
		
#The elevator cogs don't use the same spawn signal so this catches them once they join.
#You'll see the original cogs when the elevator opens but whatever
func on_participant_joined(participant: Node3D) -> void:
	if participant is Cog:
		var newdna = Globals.ALL_COGS_POOL.cogs[RandomService.randi_channel('cog_dna') % Globals.ALL_COGS_POOL.cogs.size()]
		participant.fusion = true
		participant.skelecog = false
		participant.set_dna(newdna, false)
		print("fusing (FANCY)")
		
